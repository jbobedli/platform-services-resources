{{- $policyname := "refresh-secretchanged" }}
{{- $defaults := .Values.defaults }}
{{- range $policy := .Values.policies}}
{{- if (eq $policy.name $policyname) }}
apiVersion: kyverno.io/v1
kind: {{- template "clusterOrNot" (dict "policy" $policy) }}
metadata:
{{- template "getNamespace" (dict "policy" $policy) }}
  name: {{ default $policyname $policy.custom_name }}
  annotations:
    dar.kyverno.template/file: {{$policyname}}
    dar.kyverno.policy/category: Other
    dar.kyverno.policy/suitableforproduction: 'false'
    dar.kyverno.policy/subject: Pod,Deployment,Secret
    kyverno.io/minversion: 1.6.0
    kyverno.io/kubernetes-version: "1.24"
    dar.kyverno.policy/description: >-
      Reinicia los deployments que usen como ENV algun SECRET con la labek 'kyverno.io/watch: true'
    dar.kyverno.template/parameters: 'false'
    dar.kyverno.template/filter: 'false'
         
spec:
  mutateExistingOnPolicyUpdate: false
  rules:
  - name: refresh-from-secret-env
    match:
      any:
      - resources:
          kinds:
          - Secret
          selector:
            matchLabels:
              kyverno.io/watch: 'true'
    preconditions:
      all:
      - key: "{{ printf "{{request.operation}}" | toString }}"
        operator: Equals
        value: UPDATE
    mutate:
      targets:
        - apiVersion: apps/v1
          kind: Deployment
          namespace: "{{- template "evaluateNamespace" (dict "policy" $policy) }}"
      patchStrategicMerge:
        spec:
          template:
            metadata:
              annotations:
                corp.org/random: "{{ printf "{{ random('[0-9a-z]{8}') }}" | toString }}"
            spec:
              containers:
              - env:
                - valueFrom:
                    secretKeyRef:
                      <(name): "{{ printf "{{ request.object.metadata.name }}" | toString }}"
  {{- end }}
---
{{- end }}  